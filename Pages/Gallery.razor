@page "/gallery"
@inject IStore Store
@implements IDisposable

<section id="rooms-view" class="blog-wrapper pb-0">
    @if (gallery.Count >= 0)
    {
        <div class="row">
            <h3>Our Graphics Design Collections</h3>
            @foreach(var img in gallery)
            {
                <div @onclick="() => {deleteId = img; showDialog = true;}" class="col-md-6 mb-4">
                    <div class="card p-0 border-0 rounded-0">
                        <div class="blog-img">
                            <img src="@img" alt="blog">
                        </div>
                    </div>
                </div>
            }
        </div>
            }
</section>
@if (showDialog && Store.State().Admin.IsAdmin)
{
    <section class="dialog">
        <div class="container">
            <span @onclick="CloseDialog" class="close">x</span>
            <span>Do you want to delete this item permanently?</span>
            <button @onclick="(() => Delete(deleteId))" class="main-btn">Confirm Delete</button>
        </div>
    </section>
}


@code{
    private List<string> gallery = new();
    bool showDialog = false;
    string deleteId = "";
    [Inject]
    private IWebHostEnvironment? _environment { get; set; }
    protected override void OnInitialized()
    {
        gallery = database.ReadAll<string, string>("Gallery").Values.ToList();
        //Store.AddStateChangedAction(() => { StateHasChanged(); });
    }
    private void CloseDialog()
    {
        showDialog = false;
        deleteId = string.Empty;
    }
    private void Delete(string id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            var isDel = database.Delete("Gallery", id);
            if (isDel)
            {

                DeleteImage(id ?? "");
                gallery.Remove(id ?? "");
                CloseDialog();
            }
        }
    }
    public void DeleteImage(string filePath)
    {
        if (_environment != null)
        {
            string imagePath = Path.Combine(_environment.WebRootPath, filePath);

            if (File.Exists(imagePath))
            {
                File.Delete(imagePath);
            }
        }
    }
    public void Dispose()
    {
        Store.RemoveStateChangedAction(() => { StateHasChanged(); });
    }
}
